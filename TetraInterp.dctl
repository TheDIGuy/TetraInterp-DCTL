// MIT License

// Copyright (c) 2021 calvinsilly, Ember Light, Nick Eason

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

DEFINE_UI_PARAMS(blk_r, Black-Red, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)
DEFINE_UI_PARAMS(blk_g, Black-Green, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)
DEFINE_UI_PARAMS(blk_b, Black-Blue, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)

DEFINE_UI_PARAMS(wht_r, White-Red, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)
DEFINE_UI_PARAMS(wht_g, White-Green, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)
DEFINE_UI_PARAMS(wht_b, White-Blue, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)

DEFINE_UI_PARAMS(red_r, Red-Red, DCTLUI_SLIDER_FLOAT, 1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(red_g, Red-Green, DCTLUI_SLIDER_FLOAT, 0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(red_b, Red-Blue, DCTLUI_SLIDER_FLOAT, 0.0, -2.0, 2.0, 0.001)

DEFINE_UI_PARAMS(grn_r, Green-Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(grn_g, Green-Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(grn_b, Green-Blue, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)

DEFINE_UI_PARAMS(blu_r, Blue-Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(blu_g, Blue-Green, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(blu_b, Blue-Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

DEFINE_UI_PARAMS(cyn_r, Cyan-Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(cyn_g, Cyan-Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(cyn_b, Cyan-Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

DEFINE_UI_PARAMS(mag_r, Magenta-Red, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(mag_g, Magenta-Green, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(mag_b, Magenta-Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

DEFINE_UI_PARAMS(yel_r, Yellow-Red, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(yel_g, Yellow-Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(yel_b, Yellow-Blue, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb = make_float3(p_R, p_G, p_B);

    float3 blk = make_float3(blk_r, blk_g, blk_b);
    float3 wht = make_float3(wht_r, wht_g, wht_b);
    float3 red = make_float3(red_r, red_g, red_b); 
    float3 grn = make_float3(grn_r, grn_g, grn_b);
    float3 blu = make_float3(blu_r, blu_g, blu_b);
    float3 cyn = make_float3(cyn_r, cyn_g, cyn_b);
    float3 mag = make_float3(mag_r, mag_g, mag_b);
    float3 yel = make_float3(yel_r, yel_g, yel_b);

    if (rgb.x > rgb.y)
    {
        if (rgb.y > rgb.z)
        {
            rgb = rgb.x * (red - blk) + blk + rgb.y * (yel - red) + rgb.z * (wht - yel);
        }
        else if (rgb.x > rgb.z)
        {
            rgb = rgb.x * (red - blk) + blk + rgb.y * (wht - mag) + rgb.z * (mag - red);
        }
        else
        {
            rgb = rgb.x * (mag - blu) + rgb.y * (wht - mag) + rgb.z * (blu - blk) + blk;
        }
    }
    else
    {
        if (rgb.z > rgb.y)
        {
            rgb = rgb.x * (wht - cyn) + rgb.y * (cyn - blu) + rgb.z * (blu - blk) + blk;
        }
        else if (rgb.z > rgb.x)
        {
            rgb = rgb.x * (wht - cyn) + rgb.y * (grn - blk) + blk + rgb.z * (cyn - grn);
        }
        else {
            rgb = rgb.x * (yel - grn) + rgb.y * (grn - blk) + blk + rgb.z * (wht - yel);
        }
    }

    return rgb;
}