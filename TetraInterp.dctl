// MIT License

// Copyright (c) 2021 calvinsilly, Ember Light, Nick Eason

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/TheDIGuy/TetraInterp-DCTL

// Black Point
DEFINE_UI_PARAMS(bl_R, Black-Red, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)
DEFINE_UI_PARAMS(bl_G, Black-Green, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)
DEFINE_UI_PARAMS(bl_B, Black-Blue, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)

// White Point
DEFINE_UI_PARAMS(wh_R, White-Red, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)
DEFINE_UI_PARAMS(wh_G, White-Green, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)
DEFINE_UI_PARAMS(wh_B, White-Blue, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)

// Red Point
DEFINE_UI_PARAMS(r_R, Red-Red, DCTLUI_SLIDER_FLOAT, 1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(r_G, Red-Green, DCTLUI_SLIDER_FLOAT, 0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(r_B, Red-Blue, DCTLUI_SLIDER_FLOAT, 0.0, -2.0, 2.0, 0.001)

// Green Point
DEFINE_UI_PARAMS(g_R, Green-Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(g_G, Green-Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(g_B, Green-Blue, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)

// Blue Point
DEFINE_UI_PARAMS(b_R, Blue-Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(b_G, Blue-Green, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(b_B, Blue-Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

// Cyan Point
DEFINE_UI_PARAMS(c_R, Cyan-Red, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(c_G, Cyan-Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(c_B, Cyan-Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

// Magenta Point
DEFINE_UI_PARAMS(m_R, Magenta-Red, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(m_G, Magenta-Green, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)
DEFINE_UI_PARAMS(m_B, Magenta-Blue, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)

// Yellow Point
DEFINE_UI_PARAMS(y_R, Yellow-Red, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(y_G, Yellow-Green, DCTLUI_SLIDER_FLOAT,  1.0, -1.0, 3.0, 0.001)
DEFINE_UI_PARAMS(y_B, Yellow-Blue, DCTLUI_SLIDER_FLOAT,  0.0, -2.0, 2.0, 0.001)


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb;

    const float r = p_R;
    const float g = p_G;
    const float b = p_B;
    
    float3 blk = make_float3(bl_R, bl_G, bl_B);
    float3 wht = make_float3(wh_R, wh_G, wh_B);
    float3 red = make_float3(r_R, r_G, r_B); 
    float3 grn = make_float3(g_R, g_G, g_B);
    float3 blu = make_float3(b_R, b_G, b_B);
    float3 cyn = make_float3(c_R, c_G, c_B);
    float3 mag = make_float3(m_R, m_G, m_B);
    float3 yel = make_float3(y_R, y_G, y_B);


    if (r>g) {
        // r>g>b
        if (g>b) {
            rgb = r*(red-blk)+blk + g*(yel-red) + b*(wht-yel);
        }
        // r>b>g
        else if (r>b) {
            rgb = r*(red-blk)+blk + g*(wht-mag) + b*(mag-red);
        }
        // b>r>g
        else {
            rgb = r*(mag-blu) + g*(wht-mag) + b*(blu-blk)+blk;
        }
    } else {
        // b>g>r
        if (b>g) {
            rgb = r*(wht-cyn) + g*(cyn-blu) + b*(blu-blk)+blk;
        }
        // g>b>r
        else if (b>r) {
            rgb = r*(wht-cyn) + g*(grn-blk)+blk + b*(cyn-grn);
        }
        // g>r>b
        else {
            rgb = r*(yel-grn) + g*(grn-blk)+blk + b*(wht-yel);
        }
    }

    return rgb;
}
