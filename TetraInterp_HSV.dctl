// Tetrahedral Interpolation

// Black Point
DEFINE_UI_PARAMS(bl_RGB, Black-Point, DCTLUI_SLIDER_FLOAT, 0.0, -0.25, 1.0, 0.001)

// White Point
DEFINE_UI_PARAMS(wh_RGB, White-Point, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 1.25, 0.001)

// Red Point
DEFINE_UI_PARAMS(r_Hue, Red-Hue, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(r_Sat, Red-Sat, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(r_Val, Red-Value, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.001)

// Green Point
DEFINE_UI_PARAMS(g_Hue, Green-Hue, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(g_Sat, Green-Sat, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(g_Val, Green-Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)

// Blue Point
DEFINE_UI_PARAMS(b_Hue, Blue-Hue, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(b_Sat, Blue-Sat, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(b_Val, Blue-Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)

// Cyan Point
DEFINE_UI_PARAMS(c_Hue, Cyan-Hue, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(c_Sat, Cyan-Sat, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(c_Val, Cyan-Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)

// Magenta Point
DEFINE_UI_PARAMS(m_Hue, Magenta-Hue, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(m_Sat, Magenta-Sat, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(m_Val, Magenta-Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)

// Yellow Point
DEFINE_UI_PARAMS(y_Hue, Yellow-Hue, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(y_Sat, Yellow-Sat, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)
DEFINE_UI_PARAMS(y_Val, Yellow-Value, DCTLUI_SLIDER_FLOAT,  0.0, -1.0, 1.0, 0.001)


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 rgb;

    const float r = p_R;
    const float g = p_G;
    const float b = p_B;
    
    float3 blk = make_float3(bl_RGB, bl_RGB, bl_RGB);
    float3 wht = make_float3(wh_RGB, wh_RGB, wh_RGB);
    float3 red = make_float3(1.0f, 0.0f - r_Sat, 0.0f + r_Hue - r_Sat) + make_float3(r_Val); 
    float3 grn = make_float3(0.0f - g_Sat, 1.0f, 0.0f + g_Hue - g_Sat) + make_float3(g_Val);
    float3 blu = make_float3(0.0f + b_Hue - b_Sat, 0.0f - b_Sat, 1.0f) + make_float3(b_Val);
    float3 cyn = make_float3(0.0f - c_Sat, 1.0f + c_Hue, 1.0f) + make_float3(c_Val);
    float3 mag = make_float3(1.0f, 0.0f - m_Sat, 1.0f + m_Hue) + make_float3(m_Val);
    float3 yel = make_float3(1.0f + y_Hue, 1.0f, 0.0f - y_Sat) + make_float3(y_Val);

    if (r>g) {
        // r>g>b
        if (g>b) {
            rgb = r*(red-blk)+blk + g*(yel-red) + b*(wht-yel);
        }
        // r>b>g
        else if (r>b) {
            rgb = r*(red-blk)+blk + g*(wht-mag) + b*(mag-red);
        }
        // b>r>g
        else {
            rgb = r*(mag-blu) + g*(wht-mag) + b*(blu-blk)+blk;
        }
    } else {
        // b>g>r
        if (b>g) {
            rgb = r*(wht-cyn) + g*(cyn-blu) + b*(blu-blk)+blk;
        }
        // g>b>r
        else if (b>r) {
            rgb = r*(wht-cyn) + g*(grn-blk)+blk + b*(cyn-grn);
        }
        // g>r>b
        else {
            rgb = r*(yel-grn) + g*(grn-blk)+blk + b*(wht-yel);
        }
    }

    return rgb;
}
